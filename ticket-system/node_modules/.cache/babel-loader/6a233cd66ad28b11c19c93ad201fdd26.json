{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tcapr\\\\Downloads\\\\ticket-system\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./app.scss\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // The states of the application that we will use, I describe each of them below\n  const [currentLocation, setCurrentLocation] = useState(\"\"); //The current location field\n\n  const [destination, setDestination] = useState(\"\"); // The destination field\n\n  const [date, setDate] = useState(\"\"); // The date field\n\n  const [time, setTime] = useState(\"\"); // The time field\n  // The state which is used to compare with the obtained time.\n  // Since the api returns data with +- 1 hour from the time that was specified\n\n  const [savedTime, setSavedTime] = useState(\"\");\n  const [token, setToken] = useState(null); // API token used for requests\n\n  const [tickets, setTickets] = useState(null); // The data obtained from API\n\n  const [found, setFound] = useState(true);\n  const [error, setError] = useState(\"\"); // A flag that indicates whether the data we are looking for was found\n  // The code in useEffect() will only be executed once, at page load time.\n  // This is to get the token and save it before it starts.\n\n  useEffect(() => {\n    // Calling the API from the documentation to get a token\n    fetch(\"https://test.api.amadeus.com/v1/security/oauth2/token\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded '\n      },\n      body: \"grant_type=client_credentials&client_id=5RzikAq40B23yQDiNZHb5o8LOTZngUPl&client_secret=7ZrjLSWA98jVQLx6\"\n    }).then(res => res.json()) // Decode the data to json\n    .then(data => setToken(data.access_token)); // Save token\n  }, []); // The function that is called when the user presses the Search button\n\n  const onSearch = async () => {\n    setError(\"\"); // Reset error\n\n    setSavedTime(time); // Save time\n    // Get city code of current location\n\n    const currentData = await fetch(`https://test.api.amadeus.com/v1/reference-data/locations/cities?keyword=${currentLocation}&max=3`, {\n      mode: 'cors',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(res => res.json()); // Get city code of destination\n\n    const destinationData = await fetch(`https://test.api.amadeus.com/v1/reference-data/locations/cities?keyword=${destination}&max=3`, {\n      mode: 'cors',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(res => res.json()); // Check the entered data\n\n    if (currentData.hasOwnProperty(\"warnings\")) {\n      // If the data is correct, we display an error message\n      setError(\"Current location is wrong\");\n      setTickets(null);\n      return;\n    }\n\n    if (destinationData.hasOwnProperty(\"warnings\")) {\n      setError(\"Destination is wrong\");\n      setTickets(null);\n      return;\n    } // Save city codes to variables\n\n\n    ;\n    let currentIata = null;\n    let destinationIata = null; // Because the api returns several city codes, and we only need the one with the airport,\n    // we search each city in the array and look for where there is an iataCode.\n    // Then we write the code into a variable and exit the loop\n\n    for (let currCity of currentData.data) {\n      if (currCity.hasOwnProperty('iataCode')) {\n        currentIata = currCity.iataCode;\n        break;\n      }\n    } // Same for destination\n\n\n    for (let destCity of destinationData.data) {\n      if (destCity.hasOwnProperty('iataCode')) {\n        destinationIata = destCity.iataCode;\n        break;\n      }\n    } // This is the data that will be sent with the request and is needed to get tickets,\n    // here we set values to the desired fields.\n\n\n    const data = {\n      \"originDestinations\": [{\n        \"id\": \"1\",\n        \"originLocationCode\": currentIata,\n        \"destinationLocationCode\": destinationIata,\n        \"departureDateTimeRange\": {\n          \"date\": date,\n          \"time\": time.concat(':00'),\n          \"timeWindow\": \"1H\"\n        }\n      }],\n      \"travelers\": [{\n        \"id\": \"1\",\n        \"travelerType\": \"ADULT\"\n      }],\n      \"sources\": [\"GDS\"]\n    }; // Request for tickets\n\n    fetch(\"https://test.api.amadeus.com/v2/shopping/flight-offers\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(data)\n    }).then(res => res.json()).then(data => {\n      setFound(false);\n      setTickets(data.data); // Save ticket to state\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Current location\",\n        required: true,\n        value: currentLocation,\n        onChange: e => setCurrentLocation(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Destination location\",\n        required: true,\n        value: destination,\n        onChange: e => setDestination(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        placeholder: \"Date\",\n        required: true,\n        value: date,\n        onChange: e => setDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        required: true,\n        value: time,\n        onChange: e => setTime(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: [error ? error : \"\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: [!found ? \"No tickets found\" : \"\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this), // The place where tickets are displayed on the screen.\n    // Here we check if tickets state is null or undefined, if it is not, then the loop is started\n    tickets !== null && tickets !== undefined ? tickets.map(ticket => {\n      // We get the number of segments, because there can be more than one\n      const segmentCount = ticket.itineraries[0].segments.length; // Here we get the time and date of departure\n\n      const departureTime = new Date(ticket.itineraries[0].segments[0].departure.at).toLocaleString(undefined, {\n        hour12: false,\n        hour: '2-digit',\n        minute: '2-digit'\n      }); // Since the time and date received from the api looks something like \"2022-07-18T09:00:00\",\n      // we split the string in two using T as a separator and take only the first part\n\n      const departureDate = ticket.itineraries[0].segments[0].departure.at.split('T')[0]; // The same as above\n\n      const arrivalTime = new Date(ticket.itineraries[0].segments[segmentCount - 1].arrival.at).toLocaleString(undefined, {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      const arrivalDate = ticket.itineraries[0].segments[segmentCount - 1].arrival.at.split('T')[0]; // Here we check the time of the ticket with what we need\n\n      if (departureTime === savedTime) {\n        if (!found) setFound(true); // If the time is the same, then just print the ticket with the right data\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ticket\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"road\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"current\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: departureTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: departureDate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: ticket.itineraries[0].segments[0].departure.iataCode\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"gg-arrow-long-right\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"destination\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: arrivalTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: arrivalDate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: ticket.itineraries[0].segments[segmentCount - 1].arrival.iataCode\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"separator\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"info\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u20AC\", ticket.price.total]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 24\n        }, this);\n      }\n    }) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"5hmtA1mfCXY0Ov7mT4m4KwvKvMU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","App","currentLocation","setCurrentLocation","destination","setDestination","date","setDate","time","setTime","savedTime","setSavedTime","token","setToken","tickets","setTickets","found","setFound","error","setError","fetch","method","headers","body","then","res","json","data","access_token","onSearch","currentData","mode","destinationData","hasOwnProperty","currentIata","destinationIata","currCity","iataCode","destCity","concat","JSON","stringify","e","target","value","undefined","map","ticket","segmentCount","itineraries","segments","length","departureTime","Date","departure","at","toLocaleString","hour12","hour","minute","departureDate","split","arrivalTime","arrival","arrivalDate","price","total"],"sources":["C:/Users/tcapr/Downloads/ticket-system/src/App.js"],"sourcesContent":["import \"./app.scss\";\nimport {useEffect, useState} from \"react\";\n\nconst App = () => {\n    // The states of the application that we will use, I describe each of them below\n    const [currentLocation, setCurrentLocation] = useState(\"\"); //The current location field\n    const [destination, setDestination] = useState(\"\"); // The destination field\n    const [date, setDate] = useState(\"\"); // The date field\n    const [time, setTime] = useState(\"\"); // The time field\n\n    // The state which is used to compare with the obtained time.\n    // Since the api returns data with +- 1 hour from the time that was specified\n    const [savedTime, setSavedTime] = useState(\"\");\n\n    const [token, setToken] = useState(null); // API token used for requests\n    const [tickets, setTickets] = useState(null); // The data obtained from API\n\n    const [found, setFound] = useState(true);\n    const [error, setError] = useState(\"\"); // A flag that indicates whether the data we are looking for was found\n\n    // The code in useEffect() will only be executed once, at page load time.\n    // This is to get the token and save it before it starts.\n    useEffect(() => {\n        // Calling the API from the documentation to get a token\n        fetch(\"https://test.api.amadeus.com/v1/security/oauth2/token\",{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded '\n            },\n            body: \"grant_type=client_credentials&client_id=5RzikAq40B23yQDiNZHb5o8LOTZngUPl&client_secret=7ZrjLSWA98jVQLx6\"\n        })\n        .then((res) => res.json()) // Decode the data to json\n        .then(data => setToken(data.access_token)); // Save token\n    },[])\n\n    // The function that is called when the user presses the Search button\n    const onSearch = async () => {\n        setError(\"\"); // Reset error\n        setSavedTime(time); // Save time\n\n        // Get city code of current location\n        const currentData = await fetch(`https://test.api.amadeus.com/v1/reference-data/locations/cities?keyword=${currentLocation}&max=3`,{\n            mode: 'cors',\n            headers: {\n                'Authorization': `Bearer ${token}`\n            }\n        }).then(res => res.json());\n\n        // Get city code of destination\n        const destinationData = await fetch(`https://test.api.amadeus.com/v1/reference-data/locations/cities?keyword=${destination}&max=3`,{\n            mode: 'cors',\n            headers: {\n                'Authorization': `Bearer ${token}`\n            }\n        }).then(res => res.json());\n\n        // Check the entered data\n        if(currentData.hasOwnProperty(\"warnings\"))\n        {\n            // If the data is correct, we display an error message\n            setError(\"Current location is wrong\");\n            setTickets(null);\n            return;\n        }\n\n        if(destinationData.hasOwnProperty(\"warnings\"))\n        {\n            setError(\"Destination is wrong\");\n            setTickets(null);\n            return;\n        }\n\n        // Save city codes to variables\n        ;let currentIata = null;\n        let destinationIata = null\n\n        // Because the api returns several city codes, and we only need the one with the airport,\n        // we search each city in the array and look for where there is an iataCode.\n        // Then we write the code into a variable and exit the loop\n        for(let currCity of currentData.data)\n        {\n            if(currCity.hasOwnProperty('iataCode')) {\n                currentIata = currCity.iataCode;\n                break;\n            }\n        }\n\n        // Same for destination\n        for(let destCity of destinationData.data)\n        {\n            if(destCity.hasOwnProperty('iataCode')) {\n                destinationIata = destCity.iataCode;\n                break;\n            }\n        }\n\n        // This is the data that will be sent with the request and is needed to get tickets,\n        // here we set values to the desired fields.\n        const data = {\n            \"originDestinations\": [\n                {\n                    \"id\": \"1\",\n                    \"originLocationCode\": currentIata,\n                    \"destinationLocationCode\": destinationIata,\n                    \"departureDateTimeRange\": {\n                        \"date\": date,\n                        \"time\": time.concat(':00'),\n                        \"timeWindow\": \"1H\"\n                    }\n                }\n            ],\n            \"travelers\": [\n                {\n                    \"id\": \"1\",\n                    \"travelerType\": \"ADULT\"\n                }\n            ],\n            \"sources\": [\n                \"GDS\"\n            ]\n        };\n\n        // Request for tickets\n        fetch(\"https://test.api.amadeus.com/v2/shopping/flight-offers\",{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify(data)})\n            .then(res => res.json())\n            .then(data => {\n                setFound(false);\n                setTickets(data.data); // Save ticket to state\n            });\n    }\n\n  return (\n    <div className=\"App\">\n      <div className=\"input-box\">\n          <input type=\"text\" placeholder=\"Current location\" required value={currentLocation} onChange={(e) => setCurrentLocation(e.target.value)}/>\n          <input type=\"text\" placeholder=\"Destination location\" required value={destination} onChange={(e) => setDestination(e.target.value)}/>\n          <input type=\"date\" placeholder=\"Date\" required value={date} onChange={(e) => setDate(e.target.value)}/>\n          <input type=\"time\" required value={time} onChange={(e) => setTime(e.target.value)} />\n      </div>\n\n        <button onClick={onSearch}>Search</button>\n        <p className=\"error\">{error ? error : \"\"} </p>\n        <p className=\"error\">{!found ? \"No tickets found\" : \"\"} </p>\n        {   // The place where tickets are displayed on the screen.\n            // Here we check if tickets state is null or undefined, if it is not, then the loop is started\n        tickets !== null && tickets !== undefined ? tickets.map((ticket) => {\n\n            // We get the number of segments, because there can be more than one\n            const segmentCount = ticket.itineraries[0].segments.length;\n\n            // Here we get the time and date of departure\n            const departureTime = new Date(ticket.itineraries[0].segments[0].departure.at).toLocaleString(undefined,{hour12: false, hour:'2-digit', minute:'2-digit'});\n\n            // Since the time and date received from the api looks something like \"2022-07-18T09:00:00\",\n            // we split the string in two using T as a separator and take only the first part\n            const departureDate = ticket.itineraries[0].segments[0].departure.at.split('T')[0];\n\n            // The same as above\n            const arrivalTime = new Date(ticket.itineraries[0].segments[segmentCount - 1].arrival.at).toLocaleString(undefined,{hour:'2-digit', minute:'2-digit'});\n            const arrivalDate = ticket.itineraries[0].segments[segmentCount - 1].arrival.at.split('T')[0];\n\n            // Here we check the time of the ticket with what we need\n            if(departureTime === savedTime) {\n                if(!found)\n                    setFound(true);\n                // If the time is the same, then just print the ticket with the right data\n                return <div className=\"ticket\">\n                <div className=\"road\">\n                    <div className=\"current\">\n                        <h1>{departureTime}</h1>\n                        <span>{departureDate}</span>\n                        <p>{ticket.itineraries[0].segments[0].departure.iataCode}</p>\n                    </div>\n                    <i className=\"gg-arrow-long-right\"></i>\n                    <div className=\"destination\">\n                        <h1>{arrivalTime}</h1>\n                        <span>{arrivalDate}</span>\n                        <p>{ticket.itineraries[0].segments[segmentCount - 1].arrival.iataCode}</p>\n                    </div>\n                </div>\n                <div className=\"separator\"></div>\n                <div className=\"info\">\n                    <p>€{ticket.price.total}</p>\n                </div>\n            </div>\n             }\n\n            }):\n            <p></p>}\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}